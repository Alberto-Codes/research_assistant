"""
State definition for the Gemini chat graph in the Research Agent.

This module defines the state class used to store data as it flows
through the nodes in the Gemini chat graph.
"""

from dataclasses import dataclass, field
from typing import List


@dataclass
class GeminiState:
    """
    State class for storing user prompts, AI responses, and timing information.

    Attributes:
        user_prompt: The user's input prompt for the AI agent.
        ai_response: The response generated by the AI agent.
        ai_generation_time: Time taken to generate the AI response.
        node_execution_history: History of node executions with their outputs.
        total_time: Total time taken for the graph execution.
    """

    user_prompt: str = ""
    ai_response: str = ""
    ai_generation_time: float = 0.0
    node_execution_history: List[str] = field(default_factory=list)
    total_time: float = 0.0

    def __repr__(self) -> str:
        """Provide a nice string representation of the state."""
        return (
            f"GeminiState("
            f"user_prompt='{self.user_prompt}', "
            f"ai_response='{self.ai_response}', "
            f"ai_time={self.ai_generation_time:.3f}s, "
            f"total_time={self.total_time:.3f}s)"
        ) 